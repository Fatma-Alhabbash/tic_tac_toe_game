# -*- coding: utf-8 -*-
"""Copy_of_Project_(2)_Tic_Tac_Toe.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KHs9nXpjc0o-DYyG0TBZ-MVFgbKifHAI

**Fatma Alzahraa Alhabbash**

# Tic Tac Toe Project Description

**`(1) Create Empty board (3x3):`**

  `1  2  3`

  `4 5 6`

  `7 8 9`

 **`(2) Show Board`**

 **`(3) Set Players Randomly ('X', 'O')`**

 **`(4) Take Input from Player`**

 **`(5) Check Full Board >> Draw`**

 **`(6) Check if Someone wins >> Finish`**

# Template

## Empty Board
"""

def create_empty_board():
  board = [[1,2,3],[4,5,6],[7,8,9]]
  for i in range(3):
    for j in range(1,4):
      print(str(j+(i*3)), end='       ')
    print('\n')
  return board

create_empty_board()

"""## Show Board"""

def show_board(board):
  for row in range(len(board)):
    for column in range(len(board)):
      print(board[row][column], end='       ')
    print('\n')

board = [['1','2','3'],['4','X','6'],['7','8','9']]
show_board(board)

"""## Set Players"""

import random
def set_players():
  player1 = input("Player 1 is: ")
  player2 = input("Player 2 is: ")
  lst = ['X','O']
  stplayer = random.choice(lst)
  print(f'player {stplayer} will start')
  return stplayer

set_players()

"""
## Take Input"""

def take_input(board, player, player_input):
  flag = False
  while True:
    for row in range(len(board)):
      for column in range(len(board)):
        if board[row][column] == player_input:
          board[row][column] = player
          flag = True
        print(board[row][column], end='       ')
      print('\n')

    if flag == False:
      print('Invalid Choice')
      player_input = int(input('Please Enter a number between 1,9 represents an empty position:     '))
    else:
      break
  return board

board = [['1','2','3'],['4','X','6'],['7','8','9']]
player ='O'
player_input = input('Please Enter a number between 1,9 represents an empty position:     ')
a_board = take_input(board, player, player_input)
a_board

board = [['1','2','3'],['4','X','6'],['7','8','9']]
player ='O'
player_input = '4'
take_input(board, player,player_input)

CheckFull=[]
for row in range(len(board)):
    for column in range(len(board)):
      cond =  board[row][column] in ('X', 'O')
      CheckFull.append(cond)
print(all(CheckFull))

"""## Check Full Board"""

def check_full_board(board):
  CheckFull=[]
  for row in range(len(board)):
    for column in range(len(board)):
      cond =  board[row][column] in ('X', 'x','O','o')
      CheckFull.append(cond)
  check = all(CheckFull)
  return check

board = [['o','x','x'],['o','X','o'],['x','o','x']]
check_full_board(board)

board = [['o','x','x'],['4','X','o'],['x','o','x']]
check_full_board(board)

"""## Check Win

"""

import numpy as np

def check_win(board):
  flag = True
  res = False
  for row in range(len(board)):
    row_win_x = []
    row_win_o = []
    col_win_x = []
    col_win_o = []

    for column in range(len(board)):
      # check rows
      x_cond_row  = board[row][column] in ('x', 'X')
      row_win_x.append(x_cond_row)

      o_cond_row  = board[row][column] in ('o', 'O')
      row_win_o.append(o_cond_row)

      # check columns
      x_cond_col = board[column][row] in ('x', 'X')
      col_win_x.append(x_cond_col)

      o_cond_col  = board[row][column] in ('o', 'O')
      col_win_o.append(o_cond_col)

    if all(row_win_x):
      res = True
      flag = False
      break

    elif all(row_win_o):
      res = True
      flag = False
      break

    elif all(col_win_x):
      res = True
      flag = False
      break

    elif all(col_win_o):
      res = True
      flag = False
      break

  # check diagonal
  diag_win_x = []
  diag_win_o = []
  if flag:
    for i in list(np.diagonal(board)):
      if i in ('o', 'O'):
        diag_win_o.append(True)
      else:
        diag_win_o.append(False)

    for i in list(np.diagonal(board)):
      if i in ('x', 'X'):
        diag_win_x.append(True)
      else:
        diag_win_x.append(False)


    if all(diag_win_o):
      res = True
      flag = False

    elif all(diag_win_x):
      res = True
      flag = False

  # check secondary diagonal
  diag_inv_win_x = []
  diag_inv_win_o = []
  if flag:
    for i in list(np.diagonal(np.fliplr(board))):
      if i in ('o', 'O'):
        diag_inv_win_o.append(True)
      else:
        diag_inv_win_o.append(False)

    for i in list(np.diagonal(np.fliplr(board))):
      if i in ('x', 'X'):
        diag_inv_win_x.append(True)
      else:
        diag_inv_win_x.append(False)


    if all(diag_inv_win_o):
      res = True
      flag = False

    elif all(diag_inv_win_x):
      res = True
      flag = False

    else:
      res = False
  return res

board = [['o','x','x'],['o','o','x'],['x','o','x']]
show_board(board)
check_win(board)

board = [['o','x','o'],['o','o','x'],['x','o','x']]
show_board(board)
check_win(board)

"""## Let's Play"""

def play():
  stplayer = set_players()
  board = create_empty_board()
  turn = 0
  if stplayer == 'X':
      second_player = 'O'

  elif stplayer == 'O':
    second_player = 'X'

  while True:

    if turn == 0:
      print(f'{stplayer} turn')
      turn += 1
      player = stplayer

    elif turn == 1:
      print(f'{second_player} turn')
      turn -= 1
      player = second_player

    player_input = int(input('Please Enter a number between 1,9 represents an empty position:     '))
    board = take_input(board, player, player_input)

    if check_full_board(board):
      print('Game Finished. Draw!')
      break

    if check_win(board):
      if turn == 1:
        print(f"First player {stplayer} won, congurlation!")
      elif turn == 0:
        print(f"Second player {second_player} won, congurlation!")
      break

play()